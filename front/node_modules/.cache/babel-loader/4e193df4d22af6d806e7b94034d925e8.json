{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/user/Desktop/movie-recommendation-nodejs/front/src/views/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport '../styles/Row.css';\nimport movieTrailer from 'movie-trailer';\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.original_title)).then(url => {\n      console.log(url);\n      const urlParams = new URLSearchParams(new URL(url).search);\n\n      if (trailerUrl === urlParams.get('v')) {\n        setTrailerUrl('');\n      } else {\n        setTrailerUrl(urlParams.get('v'));\n      }\n    }).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          marginTop: 30\n        },\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && 'row_posterLarge'}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.poster_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"qs2XPHSvCxVW3dKJmgNZFcJJ2AU=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/user/Desktop/movie-recommendation-nodejs/front/src/views/Row.js"],"names":["React","useState","useEffect","YouTube","axios","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","original_title","then","url","console","log","urlParams","URLSearchParams","URL","search","catch","error","marginTop","map","poster_path","id"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport YouTube from 'react-youtube';\nimport axios from '../axios';\nimport '../styles/Row.css';\nimport movieTrailer from 'movie-trailer'\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchUrl, isLargeRow}){\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState();\n\n    useEffect(() => {\n        async function fetchData(){\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl])\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars:{\n            autoplay:1,\n        },\n    }\n\n    const handleClick = (movie) => {\n        movieTrailer(movie?.name || movie?.title || movie?.original_title)\n        .then((url) => {\n            console.log(url);\n            const urlParams = new URLSearchParams(new URL(url).search);\n            if(trailerUrl === urlParams.get('v')){\n                setTrailerUrl('');    \n            }else{\n                setTrailerUrl(urlParams.get('v'));\n            }\n        })\n        .catch((error) => console.log(error));\n    }\n\n    return(\n        <div className='row'>\n            <div>\n                <h1 style={{marginTop:30}}>{title}</h1>\n            </div>\n            \n            <div className='row_posters'>\n\n                {movies.map(movie => (\n                    <img\n                        key={movie.id}\n                        onClick={() => handleClick(movie)}\n                        className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.poster_path}`} \n                        alt={movie.name}\n                    />\n                ))}\n            </div>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\n        </div>\n    )\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}